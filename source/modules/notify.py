from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, InputMediaDocument, \
    InputMediaPhoto
from components.responses import ProjectResponse
from config import IMAGE_EXTENSIONS, ROLES, GOOGLE_DIR_URL
from models import AdvanceReport, Project


class Notify:
    @staticmethod
    async def __send_to_informers(event: CallbackQuery | Message, msg_text: str,
                                  media_group: list[InputMediaPhoto | InputMediaDocument] = None):
        for chat_id in ROLES["informers"]:
            await event.bot.send_message(chat_id=chat_id, text=msg_text)
            if media_group:
                await event.bot.send_media_group(chat_id=chat_id, media=media_group)

    @staticmethod
    async def __get_projects_msg_txt(projects: list[ProjectResponse | Project]):
        msg_text = ""
        for p in projects:
            msg_text += f"\n\nüîπ <u>{p.name if type(p) is not Project else p.project_name}</u>\n" \
                        f"–°—Ç–∞—Ç—å—è –∑–∞—Ç—Ä–∞—Ç: <b>{p.expense}</b>\n" \
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{p.comment}</b>\n" \
                        f"–°—É–º–º–∞: <b>{p.amount}</b>\n" \
                        f"–í–∞–ª—é—Ç–∞: <b>{p.currency if type(p) is not Project else p.currency.value}</b>"
        return msg_text

    async def send_about_approve_for_informers(self, callback: CallbackQuery, projects: list[ProjectResponse],
                                               advance_report: AdvanceReport,
                                               media_group: list[InputMediaPhoto | InputMediaDocument] = None):
        current_fstr_date = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = (f"<b>üü¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ê–û –æ—Ç {advance_report.accountable_person}: "
                    f"(–û—Ç {current_fstr_date})</b>") + await self.__get_projects_msg_txt(projects)

        await self.__send_to_informers(event=callback, msg_text=msg_text, media_group=media_group)
        await callback.message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n" +
                                      (f"<i>üîó<a href='{GOOGLE_DIR_URL}'>–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã</a></i>"
                                       if media_group is not None else ""))

    async def send_for_approval_ar(self, callback: CallbackQuery, projects: list[ProjectResponse],
                                   advance_report: AdvanceReport, files: list[dict]):
        current_fstr_date = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = (f"<b>üü¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ê–û –æ—Ç {advance_report.accountable_person}: "
                    f"(–û—Ç {current_fstr_date})</b>") + await self.__get_projects_msg_txt(projects)
        reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_ar&{advance_report.id}"),
                InlineKeyboardButton(text="‚õîÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"failure_ar&{advance_report.id}")
            ]
        ])

        await callback.bot.send_message(
            chat_id=ROLES["approver"],
            text=msg_text,
            reply_markup=reply_keyboard
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã -----------------------------------------------------------------------------------------
        media_group = []
        for f in files:
            if any(ext in f['name'].lower() for ext in IMAGE_EXTENSIONS):
                media_group.append(InputMediaPhoto(media=f['id']))
            else:
                media_group.append(InputMediaDocument(media=f['id']))
        if files:
            await callback.bot.send_media_group(chat_id=ROLES["approver"], media=media_group)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞–º
        await self.__send_to_informers(event=callback, msg_text=msg_text, media_group=media_group if files else None)

        await callback.message.answer("‚úÖ –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")

    async def send_on_failure_ar(self, message: Message, advance_report_id: int):
        advance_report = await AdvanceReport.get(id=advance_report_id)
        date_ar = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = (f"üî¥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –ê–û <i>(–û—Ç: {date_ar})</i> –Ω–µ –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.\n"
                    f"<i>(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text})</i>")
        msg_text_for_informers = (f"üî¥ –ó–∞–ø—Ä–æ—Å –æ—Ç {advance_report.accountable_person} –ø–æ –ê–û "
                                  f"<i>(–û—Ç: {date_ar})</i> –Ω–µ –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.\n"
                                  f"<i>(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text})</i>")

        await message.bot.send_message(chat_id=advance_report.sender_chat_id, text=msg_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞–º
        await self.__send_to_informers(event=message, msg_text=msg_text_for_informers, media_group=None)

    async def send_on_accept_ar(self, message: Message, advance_report_id: int):
        advance_report = await AdvanceReport.get(id=advance_report_id)
        sender_chat_id = advance_report.sender_chat_id
        date_ar = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = f"üîµ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –ê–û <i>(–û—Ç: {date_ar})</i> –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è."
        msg_text_for_informers = (f"üîµ –ó–∞–ø—Ä–æ—Å –æ—Ç {advance_report.accountable_person} –ø–æ –ê–û "
                                  f"<i>(–û—Ç: {date_ar})</i> –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.")

        await message.bot.send_message(chat_id=sender_chat_id, text=msg_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞–º
        await self.__send_to_informers(event=message, msg_text=msg_text_for_informers, media_group=None)

    async def send_request_on_pay_ar(self, callback: CallbackQuery, advance_report_id: int):
        advance_report = await AdvanceReport.get(id=advance_report_id)
        projects = await advance_report.projects
        date_ar = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = (f"<b>üü¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ê–û –æ—Ç {advance_report.accountable_person}: "
                    f"(–û—Ç {date_ar})</b>") + await self.__get_projects_msg_txt(projects)
        reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_ar&{advance_report.id}")]
        ])

        await callback.bot.send_message(
            chat_id=ROLES["treasurer"],
            text=msg_text,
            reply_markup=reply_keyboard
        )

    async def send_on_paid_ar(self, message: Message, advance_report_id: int):
        advance_report = await AdvanceReport.get(id=advance_report_id)
        date_ar = advance_report.datetime.strftime('%d.%m.%Y-%H.%M')
        msg_text = f"üü¢ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ê–û <i>(–û—Ç: {date_ar})</i>"
        msg_text_for_informers = (f"üü¢ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ê–û –æ—Ç {advance_report.accountable_person}"
                                  f" <i>(–û—Ç: {date_ar})</i>")

        await message.bot.send_message(chat_id=advance_report.sender_chat_id, text=msg_text)
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ–± –æ–ø–ª–∞—Ç–µ.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞–º
        await self.__send_to_informers(event=message, msg_text=msg_text_for_informers, media_group=None)

